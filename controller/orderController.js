const ApiError = require("../error/ApiError");
const { Color, Product, User, Order, Cart } = require("../models/model");
const { bot } = require('../bot');
const jwt = require('jsonwebtoken');


class OrderController {
    async create(req, res, next) {
        try {
            const { productId, name, phone, address, geo, total, productColor, productImage } = req.body;
            const userId = req.user.id;

            if (!productId || !name || !phone || !address) {
                return next(ApiError.badRequest('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å userId, productId, name, phone, address, geo, total –∏ status'));
            }

            const checkColor = await Color.findOne({ where: { color: productColor } });
            if (!checkColor) {
                return next(ApiError.badRequest('–¶–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'));
            }

            const checkUser = await User.findByPk(userId);
            if (!checkUser) {
                return next(ApiError.badRequest('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'));
            }

            const checkProduct = await Product.findByPk(productId);
            if (!checkProduct) {
                return next(ApiError.badRequest('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'));
            }

            const checkCart = await Cart.findOne({ where: { productId: productId } });
            if (!checkCart) {
                return next(ApiError.badRequest('–¢–æ–≤–∞—Ä –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É'));
            }

            const price = checkProduct.price * total;
            const orderNumber = Math.floor(1000000000 + Math.random() * 9000000000);

            const order = await Order.create({
                id: orderNumber,
                productId,
                userId,
                name,
                phone,
                address,
                geo,
                total,
                productColor,
                productImage,
                price: price
            });

            checkCart.destroy()

            const successMessage = `üéâ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!` +
                `\n\nüí¨ –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–∞—à–µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ —Ä–∞—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.` +
                `\n\nüì¶ –ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: <b>${orderNumber}</b>` +
                `\n\nüìç –ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏: <b>${address}</b>` +
                `\n\nüöö –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –±—É–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –∫—É—Ä—å–µ—Ä–æ–º.` +
                `\n\nüëç –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –º—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å. üí¨`;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫–∞–∑–µ
            await bot.sendMessage(process.env.ADMIN_TELEGRAM_ID, successMessage, { parse_mode: 'HTML' });

            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ü–µ–Ω—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            const formattedPrice = `${total} ‚úñÔ∏è ${Number(checkProduct.price).toLocaleString()} = ${(total * checkProduct.price).toLocaleString()} —Å—É–º`;

            // –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
            const productMessage = `üõí <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>` +
                `\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ` +
                `\nüì¶ <b>–¢–æ–≤–∞—Ä:</b> ${checkProduct.name}` +
                `\n\nüé® <b>–¶–≤–µ—Ç:</b> ${checkColor.color_ru}` +
                `\n\nüíµ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ü–µ–Ω–∞: ${formattedPrice}</b>` +
                `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ` +
                `\n\nüõë <b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:</b> ${order.status}` +
                `\n\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${checkProduct.description}`;

            const options = {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: `cancel_order:${orderNumber}` }
                        ],
                        [
                            { text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏', callback_data: `change_location:${orderNumber}` }
                        ],
                        [
                            { text: '–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', callback_data: `contact_operator:${orderNumber}` }
                        ],
                        [
                            { text: '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', callback_data: `leave_feedback:${orderNumber}` }
                        ],
                        [
                            { text: '–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏', callback_data: `track_delivery:${orderNumber}` }
                        ],
                        [
                            { text: '–ü–æ–ª—É—á–∏—Ç—å —á–µ–∫', callback_data: `get_receipt:${orderNumber}` }
                        ]
                    ]
                }
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
            await bot.sendMessage(process.env.ADMIN_TELEGRAM_ID, productMessage, options);
            // await bot.sendPhoto(process.env.ADMIN_TELEGRAM_ID, 'http://localhost:4000' + productImage, {
            //     caption: productMessage,
            //     parse_mode: 'HTML',
            //     reply_markup: {
            //         inline_keyboard: [
            //             [
            //                 { text: '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: `cancel_order:${orderNumber}` }
            //             ],
            //             [
            //                 { text: '–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', callback_data: `contact_operator:${orderNumber}` }
            //             ]
            //         ]
            //     }
            // })
            console.log('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω', order);
            return res.json(order);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞:', err);
            return next(ApiError.badRequest('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ' + err.message));
        }
    }

    async getByUser(req, res, next) {
        try {
            const userId = req.user.id;
            const orders = await Order.findAll({ where: { userId }, include: [{ model: Product }] });
            if (!orders) {
                return next(ApiError.badRequest('–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'));
            }
            const colorPromises = orders.map(async (order) => {
                const color = await Color.findOne({ where: { color: order.productColor } });
                order.productColor = color ? color.color_ru : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç';
            });

            await Promise.all(colorPromises);
            return res.render('orders', { orders });
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞:', err);
            return next(ApiError.badRequest('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤'));
        }
    }

    async getByID(req, res, next) {
        try {
            const { id } = req.params;
            const userId = req.user.id;
            const order = await Order.findByPk(id, { include: [{ model: Product }] });
            if (order.userId !== userId) {
                return next(ApiError.forbidden('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'));
            }
            if (!order) {
                return next(ApiError.badRequest('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'));
            }
            const color = await Color.findOne({ where: { color: order.productColor } });
            order.productColor = color ? color.color_ru : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç';
            return res.json(order);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞:', err);
            return next(ApiError.badRequest('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞'));
        }
    }

    async update(req, res, next) {
        try {
            const { name, phone, address, geo, total, productColor, productImage, status } = req.body
            const { id } = req.params;
            const userId = req.user.id;
            const order = await Order.findByPk(id)
            if (!order) {
                return next(ApiError.badRequest('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'));
            }

            const user = await User.findByPk(userId);
            if (user.status === 'ADMIN') {
                order.status = status;
            } else if (status) {
                return next(ApiError.forbidden('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞'));
            }

            order.name = name || order.name;
            order.phone = phone || order.phone;
            order.address = address || order.address;
            order.geo = geo || order.geo;
            order.total = total || order.total;
            order.productColor = productColor || order.productColor;

            await order.save()

            return res.json(order);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞:', err); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            return next(ApiError.badRequest('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ' + err.message));
        }
    }

    async delete(req, res, next) {
        try {
            const { secretkey } = req.body
            const { id } = req.params;
            const order = await Order.findByPk(id)
            if (secretkey) {
                if (secretkey !== process.env.SECRET_KEY) {
                    return next(ApiError.forbidden('–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á'));
                }
            } else {
                const token = req.headers.authorization?.split(' ')[1]; // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                if (!token) {
                    return next(ApiError.badRequest('–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'));
                }

                const decoded = jwt.verify(token, process.env.SECRET_KEY);
                req.user = decoded;

                const userId = req.user.id;
                if (order.userId !== userId) {
                    return next(ApiError.forbidden('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞'));
                }
            }

            await order.destroy()
            console.log('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', order);
            return res.json(order);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞:', err);
            return next(ApiError.badRequest('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ' + err.message));
        }
    }
}

module.exports = new OrderController();